#!/usr/bin/env python3
"""
RAG API ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏
6Í∞úÏùò RAG APIÎ•º Î™®Îëê ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§.
"""
import requests
import json
import time
import base64
from typing import Dict, Any


class RAGAPITester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        
        # ÌÖåÏä§Ìä∏Ïö© PDF Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†úÎ°úÎäî ÌååÏùºÏóêÏÑú ÏùΩÏñ¥ÏôÄÏïº Ìï®)
        self.test_pdf_base64 = self._get_test_pdf_base64()
    
    def _get_test_pdf_base64(self) -> str:
        """ÌÖåÏä§Ìä∏Ïö© PDF Base64 Îç∞Ïù¥ÌÑ∞Î•º Î∞òÌôòÌï©ÎãàÎã§."""
        # Ïã§Ï†ú ÌÖåÏä§Ìä∏ÏóêÏÑúÎäî PDF ÌååÏùºÏùÑ ÏùΩÏñ¥ÏôÄÏïº Ìï©ÎãàÎã§
        # Ïó¨Í∏∞ÏÑúÎäî ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î•º Î∞òÌôòÌï©ÎãàÎã§
        return "dummy_pdf_base64_data_for_testing"
    
    def test_health_check(self) -> bool:
        """Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÌÖåÏä§Ìä∏"""
        print("üîç Testing health check...")
        try:
            response = self.session.get(f"{self.base_url}/health")
            if response.status_code == 200:
                print("‚úÖ Health check successful:", response.json())
                return True
            else:
                print("‚ùå Health check failed:", response.status_code, response.text)
                return False
        except Exception as e:
            print(f"‚ùå Health check error: {e}")
            return False
    
    def test_generating_question_with_rag(self) -> Dict[str, Any]:
        """GENERATING_QUESTION_WITH_RAG API ÌÖåÏä§Ìä∏"""
        print("üîç Testing GENERATING_QUESTION_WITH_RAG API...")
        
        payload = {
            "userId": 123,
            "bookId": 456,
            "pdf_base64": self.test_pdf_base64,
            "query": "Java Î≥ÄÏàòÏôÄ Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖÏóê ÎåÄÌïú Î¨∏Ï†úÎ•º ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî",
            "difficulty": "Î≥¥ÌÜµ",
            "question_type": "Í∞ùÍ¥ÄÏãù",
            "max_pages": 5
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/generate-question-with-rag",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ GENERATING_QUESTION_WITH_RAG successful:")
                print(f"   Question: {result.get('question', '')[:100]}...")
                print(f"   Processing time: {result.get('processing_time', 0):.2f}s")
                return result
            else:
                print(f"‚ùå GENERATING_QUESTION_WITH_RAG failed: {response.status_code}")
                print(f"   Error: {response.text}")
                return {"error": response.text}
                
        except Exception as e:
            print(f"‚ùå GENERATING_QUESTION_WITH_RAG error: {e}")
            return {"error": str(e)}
    
    def test_generating_additional_question_with_rag(self) -> Dict[str, Any]:
        """GENERATING_ADDITIONAL_QUESTION_WITH_RAG API ÌÖåÏä§Ìä∏"""
        print("üîç Testing GENERATING_ADDITIONAL_QUESTION_WITH_RAG API...")
        
        payload = {
            "userId": 123,
            "bookId": 456,
            "pdf_base64": self.test_pdf_base64,
            "query": "Ï∂îÍ∞Ä Î¨∏Ï†úÎ•º ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî",
            "previous_question_type": "Í∞ùÍ¥ÄÏãù",
            "difficulty": "Î≥¥ÌÜµ",
            "max_pages": 5
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/generate-additional-question-with-rag",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ GENERATING_ADDITIONAL_QUESTION_WITH_RAG successful:")
                print(f"   Additional Question: {result.get('additional_question', '')[:100]}...")
                print(f"   Processing time: {result.get('processing_time', 0):.2f}s")
                return result
            else:
                print(f"‚ùå GENERATING_ADDITIONAL_QUESTION_WITH_RAG failed: {response.status_code}")
                print(f"   Error: {response.text}")
                return {"error": response.text}
                
        except Exception as e:
            print(f"‚ùå GENERATING_ADDITIONAL_QUESTION_WITH_RAG error: {e}")
            return {"error": str(e)}
    
    def test_evaluating_answer_and_logging(self) -> Dict[str, Any]:
        """EVALUATING_ANSWER_AND_LOGGING API ÌÖåÏä§Ìä∏"""
        print("üîç Testing EVALUATING_ANSWER_AND_LOGGING API...")
        
        payload = {
            "userId": 123,
            "bookId": 456,
            "question": "JavaÏóêÏÑú Î≥ÄÏàòÏùò ÏÑ†Ïñ∏ Î∞©Î≤ïÏùÄ?",
            "user_answer": "int number = 10;",
            "correct_answer": "int number = 10;",
            "explanation": "Î≥ÄÏàòÎäî Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖÍ≥º Ìï®Íªò ÏÑ†Ïñ∏ÌïòÍ≥† Ï¥àÍ∏∞ÌôîÌï† Ïàò ÏûàÏäµÎãàÎã§.",
            "evaluation": "Ï†ïÎãµ"
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/evaluate-answer-and-log",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ EVALUATING_ANSWER_AND_LOGGING successful:")
                print(f"   Is Correct: {result.get('is_correct', False)}")
                print(f"   Score: {result.get('score', 0)}")
                return result
            else:
                print(f"‚ùå EVALUATING_ANSWER_AND_LOGGING failed: {response.status_code}")
                print(f"   Error: {response.text}")
                return {"error": response.text}
                
        except Exception as e:
            print(f"‚ùå EVALUATING_ANSWER_AND_LOGGING error: {e}")
            return {"error": str(e)}
    
    def test_presenting_concept_explanation(self) -> Dict[str, Any]:
        """PRESENTING_CONCEPT_EXPLANATION API ÌÖåÏä§Ìä∏"""
        print("üîç Testing PRESENTING_CONCEPT_EXPLANATION API...")
        
        payload = {
            "userId": 123,
            "bookId": 456,
            "pdf_base64": self.test_pdf_base64,
            "concept_query": "Java ÌÅ¥ÎûòÏä§ÏôÄ Í∞ùÏ≤¥Ïóê ÎåÄÌï¥ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî",
            "user_level": "Ï¥àÍ∏â",
            "max_pages": 5
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/present-concept-explanation",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ PRESENTING_CONCEPT_EXPLANATION successful:")
                print(f"   Concept: {result.get('concept_name', '')}")
                print(f"   Explanation: {result.get('explanation', '')[:100]}...")
                return result
            else:
                print(f"‚ùå PRESENTING_CONCEPT_EXPLANATION failed: {response.status_code}")
                print(f"   Error: {response.text}")
                return {"error": response.text}
                
        except Exception as e:
            print(f"‚ùå PRESENTING_CONCEPT_EXPLANATION error: {e}")
            return {"error": str(e)}
    
    def test_reexplaining_concept(self) -> Dict[str, Any]:
        """REEXPLAINING_CONCEPT API ÌÖåÏä§Ìä∏"""
        print("üîç Testing REEXPLAINING_CONCEPT API...")
        
        payload = {
            "userId": 123,
            "bookId": 456,
            "pdf_base64": self.test_pdf_base64,
            "original_concept": "Java ÌÅ¥ÎûòÏä§ÏôÄ Í∞ùÏ≤¥",
            "user_feedback": "Ïù¥Ìï¥Í∞Ä Ïïà Îê©ÎãàÎã§. Îçî ÏâΩÍ≤å ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî",
            "difficulty_level": "Îçî Ïâ¨Ïö¥",
            "max_pages": 5
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/reexplain-concept",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ REEXPLAINING_CONCEPT successful:")
                print(f"   Concept: {result.get('concept_name', '')}")
                print(f"   Reexplanation: {result.get('reexplanation', '')[:100]}...")
                return result
            else:
                print(f"‚ùå REEXPLAINING_CONCEPT failed: {response.status_code}")
                print(f"   Error: {response.text}")
                return {"error": response.text}
                
        except Exception as e:
            print(f"‚ùå REEXPLAINING_CONCEPT error: {e}")
            return {"error": str(e)}
    
    def test_processing_page_search_result(self) -> Dict[str, Any]:
        """PROCESSING_PAGE_SEARCH_RESULT API ÌÖåÏä§Ìä∏"""
        print("üîç Testing PROCESSING_PAGE_SEARCH_RESULT API...")
        
        payload = {
            "userId": 123,
            "bookId": 456,
            "pdf_base64": self.test_pdf_base64,
            "search_keyword": "Java Î∞∞Ïó¥",
            "search_type": "concept",
            "max_results": 5,
            "max_pages": 5
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/process-page-search-result",
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ PROCESSING_PAGE_SEARCH_RESULT successful:")
                print(f"   Search Keyword: {result.get('search_keyword', '')}")
                print(f"   Total Results: {result.get('total_results', 0)}")
                return result
            else:
                print(f"‚ùå PROCESSING_PAGE_SEARCH_RESULT failed: {response.status_code}")
                print(f"   Error: {response.text}")
                return {"error": response.text}
                
        except Exception as e:
            print(f"‚ùå PROCESSING_PAGE_SEARCH_RESULT error: {e}")
            return {"error": str(e)}
    
    def run_all_tests(self):
        """Î™®Îì† RAG API ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        print("üöÄ Starting RAG API Tests...")
        print("=" * 60)
        
        # 1. Ìó¨Ïä§ Ï≤¥ÌÅ¨
        if not self.test_health_check():
            print("‚ùå Health check failed. Server might not be running.")
            return
        
        print("\n" + "=" * 60)
        print("üìù Testing RAG APIs...")
        print("=" * 60)
        
        # 2. Í∞Å API ÌÖåÏä§Ìä∏
        test_cases = [
            ("GENERATING_QUESTION_WITH_RAG", self.test_generating_question_with_rag),
            ("GENERATING_ADDITIONAL_QUESTION_WITH_RAG", self.test_generating_additional_question_with_rag),
            ("EVALUATING_ANSWER_AND_LOGGING", self.test_evaluating_answer_and_logging),
            ("PRESENTING_CONCEPT_EXPLANATION", self.test_presenting_concept_explanation),
            ("REEXPLAINING_CONCEPT", self.test_reexplaining_concept),
            ("PROCESSING_PAGE_SEARCH_RESULT", self.test_processing_page_search_result)
        ]
        
        results = {}
        for test_name, test_func in test_cases:
            print(f"\nüß™ Testing: {test_name}")
            result = test_func()
            results[test_name] = result
            time.sleep(1)  # ÏöîÏ≤≠ Í∞Ñ Í∞ÑÍ≤©
        
        # 3. Í≤∞Í≥º ÏöîÏïΩ
        print("\n" + "=" * 60)
        print("üìä Test Results Summary")
        print("=" * 60)
        
        success_count = 0
        total_count = len(test_cases)
        
        for test_name, result in results.items():
            if "error" not in result:
                print(f"‚úÖ {test_name}: SUCCESS")
                success_count += 1
            else:
                print(f"‚ùå {test_name}: FAILED - {result.get('error', 'Unknown error')}")
        
        print(f"\nüéØ Overall Results: {success_count}/{total_count} tests passed")
        
        if success_count == total_count:
            print("üéâ All RAG API tests passed!")
        else:
            print("‚ö†Ô∏è  Some tests failed. Check the logs above.")
        
        return results


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    print("ü§ñ RAG API Tester")
    print("=" * 60)
    
    # ÏÑúÎ≤Ñ URL ÏÑ§Ï†ï (ÌïÑÏöîÏóê Îî∞Îùº Î≥ÄÍ≤Ω)
    base_url = "http://localhost:8000"
    
    tester = RAGAPITester(base_url)
    results = tester.run_all_tests()
    
    # Í≤∞Í≥ºÎ•º JSON ÌååÏùºÎ°ú Ï†ÄÏû•
    with open("rag_api_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Test results saved to: rag_api_test_results.json")


if __name__ == "__main__":
    main() 