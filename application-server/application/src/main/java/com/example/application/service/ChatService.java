package com.example.application.service;

import com.example.application.dto.chat.AiMessageDto;
import com.example.application.dto.chat.UserMessageDto;
import com.example.application.entity.ChatHistory;
import com.example.application.entity.ChatHistory.ChatState;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChatService {

    private final ChatHistoryService chatHistoryService;
    private final WebClient webClient;

    public List<AiMessageDto> handleChatFlow(UserMessageDto userMessageDto) {
        List<AiMessageDto> responses = new ArrayList<>();

        Long userId = userMessageDto.getUserId();
        Long bookId = userMessageDto.getBookId();
        String content = userMessageDto.getContent();

        log.info("=== ChatService Debug ===");
        log.info("userId: {}", userId);
        log.info("bookId: {}", bookId);
        log.info("content: '{}'", content);
        log.info("chatState: {}", userMessageDto.getChatState());

        // userMessageDtoÏóêÏÑú stateÍ∞Ä ÎÑòÏñ¥Ïò§Î©¥ Í∑∏Í±∏ Ïö∞ÏÑ† ÏÇ¨Ïö© (ÌîÑÎ°†Ìä∏ÏóêÏÑú ÏÉàÎ°úÏö¥ ÎåÄÌôîÎ•º ÏúÑÌï¥ WAITING_USER_SELECT_FEATUREÎ•º Î≥¥ÎÇ¥Îäî Í≤ΩÏö∞Í∞Ä ÏûàÏùå)
        ChatState currentState = userMessageDto.getChatState();

        if (currentState == null) {
            // fallback: DBÏóêÏÑú ÎßàÏßÄÎßâ ÏÉÅÌÉú Ï°∞Ìöå
            currentState = chatHistoryService.findLastMessage(userId, bookId)
                    .map(ChatHistory::getChatState)
                    .orElse(ChatState.WAITING_USER_SELECT_FEATURE);
        }
        
        log.info("currentState: {}", currentState);

        // Îπà Î©îÏãúÏßÄÏù∏ Í≤ΩÏö∞: Ï¥àÍ∏∞ ÏßÑÏûÖ ÏÉÅÌÉúÎßå Ïú†ÎèÑ, Ïú†Ï†Ä Î©îÏãúÏßÄÎäî Ï†ÄÏû• X
        if (userMessageDto.getContent() == null || userMessageDto.getContent().trim().isEmpty()) {
            ChatState next = ChatState.WAITING_USER_SELECT_FEATURE;
            AiMessageDto initial = buildLocalAiMessage(next, userId, bookId);
            initial.setChatState(next);
            chatHistoryService.saveAiMessage(initial, userId, bookId);
            responses.add(initial);
            return responses;
        }

        // Îã§Ïùå ÏÉÅÌÉú Ï†ÑÏù¥ Í≤∞Ï†ï
        ChatState nextState = determineNextState(currentState, userMessageDto.getContent());
        userMessageDto.setChatState(nextState);
        
        // FastAPI Ìò∏Ï∂ú Ïó¨Î∂Ä ÌåêÎã® (Îã§Ïùå ÏÉÅÌÉú Í∏∞Ï§Ä)
        log.info("üîç handleChatFlow - currentState: {}, nextState: {}", currentState, nextState);
        log.info("üîç handleChatFlow - shouldCallFastApi Ìò∏Ï∂ú Ï†Ñ");
        boolean shouldCall = shouldCallFastApi(nextState);
        log.info("üîç handleChatFlow - shouldCall: {}", shouldCall);
        
        log.info("üîç handleChatFlow - shouldCallÏù¥ trueÏù∏ÏßÄ ÌôïÏù∏: {}", shouldCall);
        
        AiMessageDto aiMessageDto;
        if (shouldCall) {
            log.info("üîç handleChatFlow - callFastApi Ìò∏Ï∂ú");
            aiMessageDto = callFastApi(userMessageDto);
        } else {
            log.info("üîç handleChatFlow - buildLocalAiMessage Ìò∏Ï∂ú");
            aiMessageDto = buildLocalAiMessage(nextState, userId, bookId);
        }

        // Îã§Ïùå ÏÉÅÌÉú ÏÑ§Ï†ï Î∞è Ï†ÄÏû•
        aiMessageDto.setChatState(nextState);
        chatHistoryService.saveUserMessage(userMessageDto, currentState);
        chatHistoryService.saveAiMessage(aiMessageDto, userId, bookId);

        responses.add(aiMessageDto);

        // ‚úÖ Ï∂îÍ∞Ä Ï≤òÎ¶¨: EVALUATING_ANSWER_AND_LOGGING ÌõÑ ÏûêÎèô Ï†ÑÏù¥
        // Ï∂îÍ∞Ä Î©îÏãúÏßÄ ÏÉùÏÑ± (Ïòà: WAITING_CONCEPT_RATING)
        if (nextState == ChatState.EVALUATING_ANSWER_AND_LOGGING || nextState == ChatState.REEXPLAINING_CONCEPT) {
            ChatState nextAfterEvaluation = determineNextState(nextState, userMessageDto.getContent());
            AiMessageDto followUpMessage = buildLocalAiMessage(nextAfterEvaluation, userId, bookId);
            followUpMessage.setChatState(nextAfterEvaluation);
            chatHistoryService.saveAiMessage(followUpMessage, userId, bookId);
            responses.add(followUpMessage);
        }

        return responses;
    }

    private ChatState determineNextState(ChatState currentState, String content) {
        log.info("determineNextState - currentState: {}, content: '{}'", currentState, content);
        
        ChatState nextState = switch (currentState) {
            // Ï¥àÍ∏∞ Í∏∞Îä• ÏÑ†ÌÉù ÏÉÅÌÉú: 1. Î¨∏Ï†ú ÏÉùÏÑ±, 2. ÌéòÏù¥ÏßÄ Ï∞æÍ∏∞, 3. Í∞úÎÖê ÏÑ§Î™Ö
            case WAITING_USER_SELECT_FEATURE -> switch (content) {
                case "1" -> ChatState.WAITING_PROBLEM_CRITERIA_SELECTION;
                case "2" -> ChatState.WAITING_KEYWORD_FOR_PAGE_SEARCH;
                case "3" -> ChatState.WAITING_CONCEPT_INPUT;
                default -> ChatState.WAITING_USER_SELECT_FEATURE;
            };

            // ‚úÖ 1. Î¨∏Ï†ú ÏÉùÏÑ± ÌùêÎ¶Ñ
            case WAITING_PROBLEM_CRITERIA_SELECTION -> ChatState.WAITING_PROBLEM_CONTEXT_INPUT; // Ï±ïÌÑ∞/Í∞úÎÖê ÏûÖÎ†• ÏöîÏ≤≠
            case WAITING_PROBLEM_CONTEXT_INPUT -> {
                // ÏÇ¨Ïö©ÏûêÍ∞Ä Ïã§Ï†ú ÏûÖÎ†•ÏùÑ ÌñàÏùÑ ÎïåÎßå Î¨∏Ï†ú ÏÉùÏÑ± ÏãúÏûë
                if (content != null && !content.trim().isEmpty()) {
                    yield ChatState.GENERATING_QUESTION_WITH_RAG; // ÏûÖÎ†• Í∏∞Î∞ò RAG ÏÉùÏÑ± ÏöîÏ≤≠
                } else {
                    yield ChatState.WAITING_PROBLEM_CONTEXT_INPUT; // ÏûÖÎ†• ÎåÄÍ∏∞
                }
            }

            case GENERATING_QUESTION_WITH_RAG -> ChatState.WAITING_USER_ANSWER; // Î¨∏Ï†ú Ï†úÏãú ÏôÑÎ£å, Îãµ ÎåÄÍ∏∞

            // ÏÇ¨Ïö©Ïûê Îãµ ÏûÖÎ†• ‚Üí Ï†ïÎãµ/Ïò§Îãµ ÌåêÎã®
            case WAITING_USER_ANSWER -> ChatState.EVALUATING_ANSWER_AND_LOGGING;

            // FastAPIÍ∞Ä Ìï¥ÏÑ§ÏùÑ Ìè¨Ìï®Ìïú ÌîºÎìúÎ∞± ÏùëÎãµ ‚Üí ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î∞îÎ°ú ÌèâÍ∞Ä ÏöîÏ≤≠
            case EVALUATING_ANSWER_AND_LOGGING -> ChatState.WAITING_CONCEPT_RATING;

            // ÏÇ¨Ïö©Ïûê Ïù¥Ìï¥ÎèÑ ÌèâÍ∞Ä ‚Üí Ï†êÏàòÏóê Îî∞Îùº Î∂ÑÍ∏∞
            case WAITING_CONCEPT_RATING -> {
                try {
                    int score = Integer.parseInt(content.trim());
                    if (score >= 4) yield ChatState.WAITING_NEXT_ACTION_AFTER_LEARNING;
                    else yield ChatState.WAITING_REASON_FOR_LOW_RATING;
                } catch (NumberFormatException e) {
                    yield ChatState.WAITING_CONCEPT_RATING;
                }
            }

            // ÎÇÆÏùÄ Ï†êÏàò ‚Üí Ïù¥Ïú† ÏûÖÎ†• ‚Üí Ïû¨ÏÑ§Î™Ö ÌõÑ Îã§Ïãú ÌèâÍ∞Ä Î£®ÌîÑ
            case WAITING_REASON_FOR_LOW_RATING -> ChatState.REEXPLAINING_CONCEPT;
            case REEXPLAINING_CONCEPT -> ChatState.WAITING_CONCEPT_RATING;

            // ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉù: Îã§Ïùå Î¨∏Ï†ú or Í∏∞Îä• ÏÑ†ÌÉùÏúºÎ°ú Î∂ÑÍ∏∞
            case WAITING_NEXT_ACTION_AFTER_LEARNING -> {
                if (content.equals("1")) yield ChatState.GENERATING_ADDITIONAL_QUESTION_WITH_RAG;
                else yield ChatState.WAITING_USER_SELECT_FEATURE;
            }

            case GENERATING_ADDITIONAL_QUESTION_WITH_RAG -> ChatState.EVALUATING_ANSWER_AND_LOGGING;


            // ‚úÖ 2. ÌéòÏù¥ÏßÄ Ï∞æÍ∏∞ ÌùêÎ¶Ñ ‚Üí ÌÇ§ÏõåÎìú ÏûÖÎ†• Î∞õÍ∏∞
            case WAITING_KEYWORD_FOR_PAGE_SEARCH -> ChatState.PROCESSING_PAGE_SEARCH_RESULT;
            case PROCESSING_PAGE_SEARCH_RESULT -> ChatState.WAITING_USER_SELECT_FEATURE;


            // ‚úÖ 3. Í∞úÎÖê ÏÑ§Î™Ö ÌùêÎ¶Ñ ‚Üí Í∞úÎÖê ÏûÖÎ†• ‚Üí ÏÑ§Î™Ö ‚Üí ÌèâÍ∞Ä
            case WAITING_CONCEPT_INPUT -> ChatState.PRESENTING_CONCEPT_EXPLANATION;
            case PRESENTING_CONCEPT_EXPLANATION -> ChatState.WAITING_CONCEPT_RATING;

            default -> currentState;
        };
        
        log.info("determineNextState - nextState: {}", nextState);
        return nextState;
    }

    private boolean shouldCallFastApi(ChatState state) {
        boolean shouldCall = switch (state) {
            case GENERATING_QUESTION_WITH_RAG,
                 GENERATING_ADDITIONAL_QUESTION_WITH_RAG,
                 EVALUATING_ANSWER_AND_LOGGING,
                 PRESENTING_CONCEPT_EXPLANATION,
                 REEXPLAINING_CONCEPT,
                 PROCESSING_PAGE_SEARCH_RESULT -> true;
            default -> false;
        };
        
        log.info("üîç shouldCallFastApi - state: {}, shouldCall: {}", state, shouldCall);
        return shouldCall;
    }

    // ChatStateÏóê Îî∞Îùº Îã§Î•∏ ÏóîÎìú Ìè¨Ïù∏Ìä∏Î°ú FastAPI Ìò∏Ï∂úÌï† Ïàò ÏûàÎèÑÎ°ù Î°úÏßÅ Î∞îÍæ∏Ïñ¥Ïïº Ìï®
    private AiMessageDto callFastApi(UserMessageDto dto) {
        log.info("üöÄ FastAPI Ìò∏Ï∂ú ÏãúÏûë");
        log.info("üìä ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞: userId={}, bookId={}, content='{}', chatState={}", 
                dto.getUserId(), dto.getBookId(), dto.getContent(), dto.getChatState());
        
        // ChatStateÏóê Îî∞Îùº Îã§Î•∏ ÏóîÎìúÌè¨Ïù∏Ìä∏ Ìò∏Ï∂ú
        String endpoint = switch (dto.getChatState()) {
            case GENERATING_QUESTION_WITH_RAG -> "/chat";
            case GENERATING_ADDITIONAL_QUESTION_WITH_RAG -> "/chat";
            case EVALUATING_ANSWER_AND_LOGGING -> "/chat";
            case PRESENTING_CONCEPT_EXPLANATION -> "/chat";
            case REEXPLAINING_CONCEPT -> "/chat";
            case PROCESSING_PAGE_SEARCH_RESULT -> "/chat";
            default -> "/chat";
        };
        
        log.info("üéØ Ìò∏Ï∂úÌï† ÏóîÎìúÌè¨Ïù∏Ìä∏: {}", endpoint);
        
        return webClient.post()
                .uri(endpoint)
                .bodyValue(dto)
                .retrieve()
                .bodyToMono(AiMessageDto.class)
                .onErrorResume(e -> {
                    log.error("FastAPI Ìò∏Ï∂ú Ïã§Ìå®", e);
                    return Mono.just(buildErrorMessage(dto));
                })
                .doOnSuccess(response -> {
                    log.info("‚úÖ FastAPI ÏùëÎãµ ÏÑ±Í≥µ: {}", response.getContent());
                })
                .doOnError(error -> {
                    log.error("‚ùå FastAPI Ìò∏Ï∂ú Ïò§Î•ò: {}", error.getMessage());
                })
                .block();
    }

    private AiMessageDto buildLocalAiMessage(ChatState state, Long userId, Long bookId) {
        String message = switch (state) {
            case WAITING_USER_SELECT_FEATURE -> "Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?\n1. ÏòàÏÉÅ Î¨∏Ï†ú ÏÉùÏÑ±\n2. ÌéòÏù¥ÏßÄ Ï∞æÍ∏∞\n3. Í∞úÎÖê ÏÑ§Î™Ö";
            case WAITING_PROBLEM_CRITERIA_SELECTION -> "Î¨∏Ï†úÎ•º Ïñ¥Îñ§ Í∏∞Ï§ÄÏúºÎ°ú ÏÉùÏÑ±Ìï†ÍπåÏöî?\n1. Ï±ïÌÑ∞/ÌéòÏù¥ÏßÄ Î≤îÏúÑ\n2. ÌäπÏ†ï Í∞úÎÖê";
            case WAITING_PROBLEM_CONTEXT_INPUT -> "Î¨∏Ï†ú ÏÉùÏÑ±ÏùÑ ÏúÑÌïú Î≤îÏúÑÎÇò Í∞úÎÖêÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.";
            case WAITING_USER_ANSWER -> "ÏúÑ Î¨∏Ï†úÏùò ÎãµÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.";

            case WAITING_KEYWORD_FOR_PAGE_SEARCH -> "ÌéòÏù¥ÏßÄÎ•º Ï∞æÍ∏∞ ÏúÑÌïú ÌÇ§ÏõåÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.";

            case WAITING_NEXT_ACTION_AFTER_LEARNING -> "Îã§ÏùåÏúºÎ°ú Î¨¥ÏóáÏùÑ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n1. Îã§Ïùå Î¨∏Ï†ú\n2. Í∏∞Îä• ÏÑ†ÌÉù";
            case WAITING_CONCEPT_RATING -> "ÏÑ§Î™ÖÏù¥ ÎèÑÏõÄÏù¥ ÎêòÏóàÎÇòÏöî? 1~5Ï†êÏúºÎ°ú ÌèâÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.";
            case WAITING_REASON_FOR_LOW_RATING -> "Ïù¥Ìï¥Í∞Ä Ïñ¥Î†§Ïõ†Îçò Ï†êÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî. Î≥¥Ï∂© ÏÑ§Î™ÖÏùÑ ÎìúÎ¶¥Í≤åÏöî.";

            case WAITING_CONCEPT_INPUT -> "Ïñ¥Îñ§ Í∞úÎÖêÏóê ÎåÄÌïú ÏÑ§Î™ÖÏù¥ ÌïÑÏöîÌïúÍ∞ÄÏöî?";

            default -> "ÏûÖÎ†•ÏùÑ ÌôïÏù∏ÌñàÏäµÎãàÎã§. Îã§Ïùå Îã®Í≥ÑÎ•º ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî.";
        };

        // ÏÉÅÌÉúÏóê Îî∞ÎùºÏÑú messageÎ•º Îã§Î•¥Í≤å ÏÑ§Ï†ïÌï¥Ï£ºÏñ¥Ïïº Ìï®(ÌòÑÏû¨Îäî ÎòëÍ∞ôÏù¥ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏùå)
        return AiMessageDto.builder()
                .userId(userId)
                .bookId(bookId)
                .content(message)
                .messageType("TEXT")
                .chatState(state)
                .build();
    }

    private AiMessageDto buildErrorMessage(UserMessageDto dto) {
        return AiMessageDto.builder()
                .userId(dto.getUserId())
                .bookId(dto.getBookId())
                .content("‚ö†Ô∏è FastAPI ÏùëÎãµÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
                .chatState(dto.getChatState())
                .messageType("TEXT")
                .build();
    }

    public boolean checkLangChainConnection() {
        try {
            return webClient.get()
                    .uri("/ping")
                    .retrieve()
                    .toBodilessEntity()
                    .block()
                    .getStatusCode()
                    .is2xxSuccessful();
        } catch (Exception e) {
            log.error("LangChain Ïó∞Í≤∞ Ïã§Ìå®", e);
            return false;
        }
    }
}