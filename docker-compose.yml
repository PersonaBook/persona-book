# version: '3.8' # Docker Compose v2에서는 version 필드가 불필요함

services: # 여러 개의 컨테이너를 정의할 수 있는 블록
  mysql: # 내부 네트워크에서 mysql로 접근 가능
    image: mysql:8.0.33
    container_name: mysql-container
    ports:
      - "3307:3306"
      # 호스트와 컨테이너
      # 호스트 : 도커를 실행하는 실제 물리적 컴퓨터
      # 컨테이너 : 도커가 만든 독립적인 실행 환경(가상 환경)
      # 현재 컨테이너의 3306 포트가 호스트의 3307로 매핑 -> 3307 포트로 MySQL 컨테이너에 접근, 같은 Docker 네트워크에서는 3306 포트로 접근
    env_file:
      - .env.dev
      - .env.prod
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -u$${MYSQL_USER} -p$${MYSQL_PASSWORD} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  application: # 내부 네트워크에서 application으로 접근 가능
    build:
      context: ./application-server/application # Dockerfile이 위치한 경로
    container_name: application-container
    ports:
      - "8080:8080" # 호스트 포트 : 컨테이너 포트 매핑
    env_file:
      - .env.dev
      - .env.prod
    depends_on:
      mysql: # mysql 서비스가 먼저 시작된 후 application이 실행됨
        condition: service_healthy # mysql 컨테이너가 건강 상태가 좋을 때만 시작
    networks:
      - backend

  langchain:
    build:
      context: ./langchain-server
    container_name: langchain-container
    ports:
      - "8000:8000"
    env_file:
      - .env.dev
      - .env.prod
    depends_on:
      - elasticsearch
    networks:
      - backend

  elasticsearch:
    build:
      context: ./langchain-server
      dockerfile: Dockerfile.elasticsearch
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    networks:
      - backend

volumes:
  mysql_data: # mysql 데이터가 저장될 영속적 볼륨 정의

networks:
  backend: # 내부 네트워크